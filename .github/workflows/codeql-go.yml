# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced (Go)"

on:
  workflow_call:

  schedule:
    - cron: '41 13 * * 0'

jobs:
  analyze-go:
    name: Analyze (Go)
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

      # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
      # Use `c-cpp` to analyze code written in C, C++ or both
      # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
      # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
      # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
      # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
      # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
      # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download All 'dev.galasa' Artifacts
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
      uses: actions/download-artifact@v4
      with:
        name: all-artifacts
        path: /home/runner/.m2/repository/dev/galasa

    # If this is running on a schedule, we need to
    # download from the last Main Build Orchestrator
    - name: Find Artifacts from the last successful Main Build
      if: ${{ github.event_name == 'schedule' }}
      id: find-artifacts
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "workflow_for_artifact_download_id=$(gh run list \
          --repo ${{ github.repository }} \
          --workflow 'Main Build Orchestrator' \
          --branch main \
          --status success \
          --limit 1 \
          --json databaseId | jq '.[0].databaseId')" >> $GITHUB_OUTPUT

    - name: Download All 'dev.galasa' Artifacts
      if: ${{ github.event_name == 'schedule' }}
      uses: actions/download-artifact@v4
      with:
        name: all-artifacts
        path: /home/runner/.m2/repository/dev/galasa
        github-token: ${{ github.token }}
        run-id: ${{ steps.find-artifacts.outputs.workflow_for_artifact_download_id }}

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go
        build-mode: manual
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    - name: Building Buildutils (manually)
      shell: bash
      working-directory: ${{ github.workspace }}/modules/buildutils
      run: |
        make all
        make all -C openapi2beans

    - name: Building CLI (manually)
      shell: bash
      working-directory: ${{ github.workspace }}/modules/cli
      run: |
        set -o pipefail
        gradle -b build.gradle installJarsIntoTemplates --info \
        --no-daemon --console plain \
        -PsourceMaven=https://development.galasa.dev/main/maven-repo/obr \
        -PcentralMaven=https://repo.maven.apache.org/maven2/ \
        -PtargetMaven=/home/runner/.m2/repository 2>&1 | tee build.log
        docker run --rm --user $(id -u):$(id -g) -v ${{ github.workspace }}/modules/cli:/var/workspace ghcr.io/galasa-dev/openapi:main \
        java -jar /opt/openapi/openapi-generator-cli.jar generate \
        -i /var/workspace/build/dependencies/openapi.yaml \
        -g go \
        -o /var/workspace/pkg/galasaapi \
        --additional-properties=packageName=galasaapi \
        --global-property=apiTests=false
        chmod +x ./fix-generated-code.sh
        ./fix-generated-code.sh
        docker run --rm -v ${{ github.workspace }}/modules/cli:/var/workspace ghcr.io/galasa-dev/openapi:main \
        rm /var/workspace/pkg/galasaapi/go.mod
        docker run --rm -v ${{ github.workspace }}/modules/cli:/var/workspace ghcr.io/galasa-dev/openapi:main \
        rm /var/workspace/pkg/galasaapi/go.sum
        version=$(cat VERSION) &&
        cat pkg/cmd/root.go | sed "s/unknowncliversion-unknowngithash/${version}/1" > temp.txt &&
        mv -f temp.txt pkg/cmd/root.go &&
        cat pkg/cmd/root.go
        make all

    - name: Perform CodeQL Analysis Go
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:go"
        checkout_path: ${{ github.workspace }}
        output: results-go.sarif