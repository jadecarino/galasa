#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#
name: OBR Main Build

on:
  workflow_call:
    inputs:
      galasa-version:
        # The version of Galasa we are building. eg:0.123.0
        # Access this value using ${{inputs.galasa-version}}
        type: string
        required: true

env:
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}
  BRANCH: ${{ github.ref_name }}

jobs:
  log-github-ref:
    name: Log the GitHub ref this workflow is running on (Branch or tag that received dispatch)
    runs-on: ubuntu-latest
    steps:
      - name: Log GitHub ref of workflow
        run: |
          echo "This workflow is running on GitHub ref ${{ env.BRANCH }}"

  build-obr:
    name: Build OBR using galasabld image and maven
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            modules/framework
            modules/extensions
            modules/managers
            modules/obr
            .github/common-files/settings.xml
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'semeru'

      - name: Make secrets directory
        run : |
          mkdir /home/runner/work/secrets
      
      - name: Copy GPG passphrase
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run : |
          echo $GPG_PASSPHRASE > /home/runner/work/secrets/passphrase.file
      
      - name: Copy GPG key
        env:
          GPG_KEY_BASE64: ${{ secrets.GPG_KEY }}
        run : |
          echo $GPG_KEY_BASE64 |  base64 --decode > /home/runner/work/secrets/galasa.gpg
            
      - name: Make GPG home directory and change permissions
        run: |
          mkdir /home/runner/work/gpg
          chmod '700' /home/runner/work/gpg

      - name: Copy settings.xml
        run : |
          cp ${{ github.workspace }}/.github/common-files/settings.xml /home/runner/work/gpg/settings.xml
        
      - name: Import GPG
        run: |
          gpg --homedir /home/runner/work/gpg --pinentry-mode loopback --passphrase-file /home/runner/work/secrets/passphrase.file --import /home/runner/work/secrets/galasa.gpg

      # This is required so the galasabld-amd64 image can be run in the next step.
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        env:
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}
      
      - name:  Generate Galasa BOM
        run: |
          docker run --rm -v ${{ github.workspace }}/modules:/var/root/ ghcr.io/${{ env.NAMESPACE }}/galasabld-amd64:main template --releaseMetadata var/root/framework/release.yaml --releaseMetadata /var/root/extensions/release.yaml --releaseMetadata /var/root/managers/release.yaml --releaseMetadata /var/root/obr/release.yaml --template /var/root/obr/galasa-bom/pom.template --output /var/root/obr/galasa-bom/pom.xml --bom
          
      - name: Display Galasa BOM pom.xml
        run: |
          cat modules/obr/galasa-bom/pom.xml

      - name: Download platform from this workflow
        id: download-platform
        uses: actions/download-artifact@v4
        with:
          name: platform
          path: modules/artifacts

      - name: Download wrapping artifacts from this workflow
        id: download-wrapping
        uses: actions/download-artifact@v4
        with:
          name: wrapping
          path: modules/artifacts

      - name: Download gradle artifacts from this workflow
        id: download-gradle
        uses: actions/download-artifact@v4
        with:
          name: gradle
          path: modules/artifacts

      - name: Download maven artifacts from this workflow
        id: download-maven
        uses: actions/download-artifact@v4
        with:
          name: maven
          path: modules/artifacts

      - name: Download framework artifacts from this workflow
        id: download-framework
        uses: actions/download-artifact@v4
        with:
          name: framework
          path: modules/artifacts

      - name: Download extensions artifacts from this workflow
        id: download-extensions
        uses: actions/download-artifact@v4
        with:
          name: extensions
          path: modules/artifacts

      - name: Download managers artifacts from this workflow
        id: download-managers
        uses: actions/download-artifact@v4
        with:
          name: managers
          path: modules/artifacts

      - name: Build Galasa BOM with maven
        working-directory: modules/obr
        env:
          GPG_KEYID: ${{ secrets.GPG_KEYID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -o pipefail
          mvn -f galasa-bom/pom.xml deploy -X \
          -Dgalasa.source.repo=file:${{ github.workspace }}/modules/artifacts \
          -Dgalasa.central.repo=https://repo.maven.apache.org/maven2/ \
          -Dgalasa.release.repo=file:${{ github.workspace }}/modules/obr/repo \
          -Dgpg.key.id="${{ env.GPG_KEYID }}" \
          -Dgpg.passphrase="${{ env.GPG_PASSPHRASE }}" \
          --batch-mode --errors --fail-at-end \
          --settings /home/runner/work/gpg/settings.xml 2>&1 | tee galasa-bom-build.log
        
      - name: Upload Galasa BOM build log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: galasa-bom-build-log
          path: modules/obr/galasa-bom-build.log
          retention-days: 7

      # This is required so the galasabld-amd64 image can be run in the next step.
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        env:
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}
      
      - name:  Generate Galasa OBR
        run: |
          docker run --rm -v ${{ github.workspace }}/modules:/var/root/ ghcr.io/${{ env.NAMESPACE }}/galasabld-amd64:main template --releaseMetadata var/root/framework/release.yaml --releaseMetadata /var/root/extensions/release.yaml --releaseMetadata /var/root/managers/release.yaml --releaseMetadata /var/root/obr/release.yaml --template /var/root/obr/dev.galasa.uber.obr/pom.template --output /var/root/obr/dev.galasa.uber.obr/pom.xml --obr
          
      - name: Display Galasa OBR pom.xml
        run: |
          cat modules/obr/dev.galasa.uber.obr/pom.xml
      
      # - name: Cache OBR dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.m2/repository
      #       !~/.m2/repository/dev/galasa/**
      #     key: cache-obr-${{ hashFiles('**/pom.xml') }} 
      #     restore-keys: |
      #         cache-obr-
        
      - name: Build Galasa OBR with maven
        working-directory: modules/obr
        env:
          GPG_KEYID: ${{ secrets.GPG_KEYID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -o pipefail
          mvn -f dev.galasa.uber.obr/pom.xml deploy -X \
          -Dgalasa.source.repo=file:${{ github.workspace }}/modules/artifacts \
          -Dgalasa.central.repo=https://repo.maven.apache.org/maven2/ \
          -Dgalasa.release.repo=file:${{ github.workspace }}/modules/obr/repo \
          -Dgpg.key.id="${{ env.GPG_KEYID }}" \
          -Dgpg.passphrase="${{ env.GPG_PASSPHRASE }}" \
          --batch-mode --errors --fail-at-end \
          --settings /home/runner/work/gpg/settings.xml 2>&1 | tee galasa-obr-build.log
    
      - name: Upload Galasa OBR build log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: galasa-obr-build-log
          path: modules/obr/galasa-obr-build.log
          retention-days: 7

      # The obr-maven-artefacts image which is built from the release repo's directory
      # needs not only the obr module's artifacts but all other module's artifacts.
      # All other module's artifacts were placed in the source repo previously in the workflow.
      - name: Copy source repo into release repo
        run: |
          cp -R ${{ github.workspace }}/modules/artifacts/* ${{ github.workspace }}/modules/obr/repo

      - name: Add githashes of each module to OBR image
        run: |
          echo $(git log -1 --pretty=format:"%H" -- "modules/buildutils") > modules/obr/buildutils.githash
          echo $(git log -1 --pretty=format:"%H" -- "modules/wrapping") > modules/obr/wrapping.githash
          echo $(git log -1 --pretty=format:"%H" -- "modules/gradle") > modules/obr/gradle.githash
          echo $(git log -1 --pretty=format:"%H" -- "modules/maven") > modules/obr/maven.githash
          echo $(git log -1 --pretty=format:"%H" -- "modules/framework") > modules/obr/framework.githash
          echo $(git log -1 --pretty=format:"%H" -- "modules/extensions") > modules/obr/extensions.githash
          echo $(git log -1 --pretty=format:"%H" -- "modules/managers") > modules/obr/managers.githash
          echo $(git log -1 --pretty=format:"%H" -- "modules/obr") > modules/obr/obr.githash

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        env:
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}
    
      - name: Extract metadata for OBR image
        id: metadata-obr
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/obr-maven-artefacts

      # Here we build a Docker image that contains all dev.galasa artifacts
      # to deploy to a download site. It contains all artifacts listed in 
      # the Uber OBR.
      - name: Build and push OBR image 
        id: build-obr
        uses: docker/build-push-action@v5
        with:
          context: modules/obr
          file: modules/obr/dockerfiles/dockerfile.obr
          push: true
          tags: ${{ steps.metadata-obr.outputs.tags }}
          labels: ${{ steps.metadata-obr.outputs.labels }}
          build-args: |
            dockerRepository=${{ env.REGISTRY }}
            baseVersion=latest
      
      - name: Recycle OBR application in ArgoCD
        # Skip this job for forks
        if: ${{ github.repository_owner == 'galasa-dev' }}
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          docker run --env ARGOCD_AUTH_TOKEN=${{ env.ARGOCD_AUTH_TOKEN }} --rm ghcr.io/galasa-dev/argocdcli:main app actions run ${{ env.BRANCH }}-maven-repos restart --kind Deployment --resource-name obr-${{ env.BRANCH }} --server argocd.galasa.dev --grpc-web

      - name: Wait for OBR application health in ArgoCD
        # Skip this job for forks
        if: ${{ github.repository_owner == 'galasa-dev' }}
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          docker run --env ARGOCD_AUTH_TOKEN=${{ env.ARGOCD_AUTH_TOKEN }} --rm ghcr.io/galasa-dev/argocdcli:main app wait ${{ env.BRANCH }}-maven-repos --resource apps:Deployment:obr-${{ env.BRANCH }} --health --server argocd.galasa.dev --grpc-web

      # Here we remove the artifacts built by the other modules (everything
      # other than dev.galasa.uber.obr and galasa-bom) as otherwise when
      # a workflow downloads this zip, the other module's artifacts are 
      # overwritten by the contents of this zip.
      - name: Remove other module's artifacts before uploading to workflow
        working-directory: modules/obr/repo/dev/galasa
        run: |
          mkdir -p ../tmp && mv dev.galasa.uber.obr galasa-bom ../tmp/
          rm -rf ./*
          mv ../tmp/dev.galasa.uber.obr ../tmp/galasa-bom ./

      - name: Upload OBR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: obr
          path: modules/obr/repo

  # For the release process build an image containing
  # the OBR artifacts and a galasabld executable used
  # to deploy artifacts to the Sonatype staging repo.
  build-obr-galasabld-image:
    name: Build Docker image with OBR artifacts and galasabld executable
    # Skip for forks.
    if: ${{ github.repository_owner == 'galasa-dev' }}
    needs: build-obr
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            modules/obr

      - name: Download galasabld executables
        id: download-galasabld
        uses: actions/download-artifact@v4
        with:
          name: galasabld
          path: modules/artifacts/galasabld

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        env:
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}

      - name: Extract metadata for OBR artifacts and galasabld executable image
        id: metadata-obr-galasabld
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/obr-with-galasabld-executable

      - name: Build image with OBR artifacts and galasabld executable
        id: build-obr-galasabld
        uses: docker/build-push-action@v5
        with:
          context: modules/artifacts/galasabld
          file: modules/obr/dockerfiles/dockerfile.obrgalasabld
          push: true
          tags: ${{ steps.metadata-obr-galasabld.outputs.tags }}
          labels: ${{ steps.metadata-obr-galasabld.outputs.labels }}
          build-args: |
            dockerRepository=${{ env.REGISTRY }}
            tag=${{ env.BRANCH }}
            platform=linux-amd64

  build-obr-javadocs:
    name: Build OBR javadocs using galasabld image and maven
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            modules/framework
            modules/extensions
            modules/managers
            modules/obr
            .github/common-files/settings.xml

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'semeru'
      
      - name: Make secrets directory
        run : |
          mkdir /home/runner/work/secrets

      - name: Copy GPG passphrase
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run : |
          echo $GPG_PASSPHRASE > /home/runner/work/secrets/passphrase.file

      - name: Copy GPG key
        env:
          GPG_KEY_BASE64: ${{ secrets.GPG_KEY }}
        run : |
          echo $GPG_KEY_BASE64 |  base64 --decode > /home/runner/work/secrets/galasa.gpg
          
      - name: Make GPG home directory and change permissions
        run: |
          mkdir /home/runner/work/gpg
          chmod '700' /home/runner/work/gpg

      - name: Copy settings.xml
        run : |
          cp ${{ github.workspace }}/.github/common-files/settings.xml /home/runner/work/gpg/settings.xml

      - name: Import GPG
        run: |
          gpg --homedir /home/runner/work/gpg --pinentry-mode loopback --passphrase-file /home/runner/work/secrets/passphrase.file --import /home/runner/work/secrets/galasa.gpg

      # This is required so the galasabld-amd64 image can be run in the next step.
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        env:
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}
          
      - name: Build Galasa Javadoc
        run: |
          docker run --rm -v ${{ github.workspace }}/modules:/var/root/ ghcr.io/${{ env.NAMESPACE }}/galasabld-amd64:main template --releaseMetadata var/root/framework/release.yaml --releaseMetadata /var/root/extensions/release.yaml --releaseMetadata /var/root/managers/release.yaml --releaseMetadata /var/root/obr/release.yaml --template /var/root/obr/javadocs/pom.template --output /var/root/obr/javadocs/pom.xml --javadoc
            
      - name: Display Galasa Javadoc pom.xml 
        run: |
          cat modules/obr/javadocs/pom.xml

      - name: Download platform from this workflow
        id: download-platform
        uses: actions/download-artifact@v4
        with:
          name: platform
          path: modules/artifacts

      - name: Download wrapping artifacts from this workflow
        id: download-wrapping
        uses: actions/download-artifact@v4
        with:
          name: wrapping
          path: modules/artifacts

      - name: Download gradle artifacts from this workflow
        id: download-gradle
        uses: actions/download-artifact@v4
        with:
          name: gradle
          path: modules/artifacts

      - name: Download maven artifacts from this workflow
        id: download-maven
        uses: actions/download-artifact@v4
        with:
          name: maven
          path: modules/artifacts

      - name: Download framework artifacts from this workflow
        id: download-framework
        uses: actions/download-artifact@v4
        with:
          name: framework
          path: modules/artifacts

      - name: Download extensions artifacts from this workflow
        id: download-extensions
        uses: actions/download-artifact@v4
        with:
          name: extensions
          path: modules/artifacts

      - name: Download managers artifacts from this workflow
        id: download-managers
        uses: actions/download-artifact@v4
        with:
          name: managers
          path: modules/artifacts
      
      # - name: Cache OBR-javadoc dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.m2/repository
      #       !~/.m2/repository/dev/galasa/**
      #     key: cache-obr-javadoc-${{ hashFiles('**/pom.xml') }} 
      #     restore-keys: |
      #         cache-obr-javadoc-

      - name: Build javadoc site using maven
        working-directory: modules/obr/javadocs
        env:
          GPG_KEYID: ${{ secrets.GPG_KEYID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -o pipefail
          # Note: We install the built artifacts into a temporary location.
          mkdir -p ${{ github.workspace }}/modules/obr/javadocs/temp
          mvn -f pom.xml deploy -X \
          -Dgalasa.source.repo=file:${{ github.workspace }}/modules/artifacts \
          -Dgalasa.central.repo=https://repo.maven.apache.org/maven2/ \
          -Dgalasa.release.repo=file:${{ github.workspace }}/modules/obr/javadocs/temp \
          -Dmaven.javadoc.failOnError=false \
          -Dgpg.key.id=${{ env.GPG_KEYID }} \
          -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} \
          --batch-mode --errors --fail-at-end \
          --settings /home/runner/work/gpg/settings.xml 2>&1 | tee build.log

      # Note: We publish from a different repository, so the maven comand can't find the javadoc's pom.xml,
      # as we want it to create a new one.
      - name: Publish the javadoc site using maven, so that the maven bundle contains no dependencies.
        working-directory: modules/obr
        env:
          GPG_KEYID: ${{ secrets.GPG_KEYID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GALASA_VERSION: ${{ inputs.galasa-version }}
        run: |
          # Note: This creates a new pom.xml which is very simple, so no transitive dependencies are
          # available for it.
          # Note: We append to the build log.
          set -o pipefail
          mvn deploy:deploy-file \
          -Dgpg.key.id=${{ env.GPG_KEYID }} \
          -Dgpg.passphrase=${{ env.GPG_PASSPHRASE }} \
          -Durl=file:${{ github.workspace }}/modules/obr/javadocs/docker/repo \
          -DgroupId=dev.galasa \
          -Dversion=${{ env.GALASA_VERSION }} \
          -DartifactId=galasa-uber-javadoc \
          -Dpackaging=zip \
          -Dfile=${{ github.workspace }}/modules/obr/javadocs/temp/dev/galasa/galasa-uber-javadoc/${{ env.GALASA_VERSION }}/galasa-uber-javadoc-${{ env.GALASA_VERSION }}.zip \
          -Dgalasa.central.repo=https://repo.maven.apache.org/maven2/ \
          -Dgalasa.release.repo=file:${{ github.workspace }}/modules/obr/javadocs/docker/repo \
          -Dmaven.javadoc.failOnError=false \
          --batch-mode --errors --fail-at-end \
          --settings ${{ github.workspace }}/modules/obr/settings.xml 2>&1 | tee -a javadocs/build.log
      
      - name: Upload Javadoc site build log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: javadoc-site-build-log
          path: modules/obr/javadocs/build.log
          retention-days: 7

      - name: Upload built javadoc maven artifacts
        uses: actions/upload-artifact@v4
        with:
          name: javadoc
          path: modules/obr/javadocs/docker/repo
      
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        env:
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}
    
      - name: Extract metadata for Javadoc site image
        id: metadata-javadoc-site
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/javadoc-site
  
      - name: Build and push Javadoc site image 
        id: build-javadoc-site
        uses: docker/build-push-action@v5
        with:
          context: modules/obr
          file: modules/obr/dockerfiles/dockerfile.javadocsite
          push: true
          tags: ${{ steps.metadata-javadoc-site.outputs.tags }}
          labels: ${{ steps.metadata-javadoc-site.outputs.labels }}
      
      - name: Recycle javadocsite application in ArgoCD
        # Skip this job for forks
        if: ${{ github.repository_owner == 'galasa-dev' }}
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          docker run --env ARGOCD_AUTH_TOKEN=${{ env.ARGOCD_AUTH_TOKEN }} --rm ghcr.io/${{ env.NAMESPACE }}/argocdcli:main app actions run ${{ env.BRANCH }}-maven-repos restart --kind Deployment --resource-name javadocsite-${{ env.BRANCH }} --server argocd.galasa.dev --grpc-web
      
      - name: Wait for javadocsite application health in ArgoCD
        # Skip this job for forks
        if: ${{ github.repository_owner == 'galasa-dev' }}
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          docker run --env ARGOCD_AUTH_TOKEN=${{ env.ARGOCD_AUTH_TOKEN }} --rm ghcr.io/${{ env.NAMESPACE }}/argocdcli:main app wait ${{ env.BRANCH }}-maven-repos --resource apps:Deployment:javadocsite-${{ env.BRANCH }} --health --server argocd.galasa.dev --grpc-web
      
      - name: Extract metadata for Javadoc Maven repo image
        id: metadata
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/javadoc-maven-artefacts
    
      - name: Build and push Javadoc Maven repo image 
        id: build
        uses: docker/build-push-action@v5
        with:
          context: modules/obr
          file: modules/obr/dockerfiles/dockerfile.javadocmavenrepo
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            dockerRepository=${{ env.REGISTRY }}
            baseVersion=latest
          
      - name: Recycle javadoc application in ArgoCD
        # Skip this job for forks
        if: ${{ github.repository_owner == 'galasa-dev' }}
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          docker run --env ARGOCD_AUTH_TOKEN=${{ env.ARGOCD_AUTH_TOKEN }} --rm ghcr.io/${{ env.NAMESPACE }}/argocdcli:main app actions run ${{ env.BRANCH }}-maven-repos restart --kind Deployment --resource-name javadoc-${{ env.BRANCH }} --server argocd.galasa.dev --grpc-web

      - name: Wait for javadoc application health in ArgoCD
        # Skip this job for forks
        if: ${{ github.repository_owner == 'galasa-dev' }}
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          docker run --env ARGOCD_AUTH_TOKEN=${{ env.ARGOCD_AUTH_TOKEN }} --rm ghcr.io/${{ env.NAMESPACE }}/argocdcli:main app wait ${{ env.BRANCH }}-maven-repos --resource apps:Deployment:javadoc-${{ env.BRANCH }} --health --server argocd.galasa.dev --grpc-web

  build-obr-generic:
    name: Build OBR embedded and boot images using galasabld and maven
    runs-on: ubuntu-latest
    needs: [build-obr, build-obr-javadocs]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            modules/framework
            modules/extensions
            modules/managers
            modules/obr
            .github/common-files/settings.xml
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'semeru'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Make secrets directory
        run : |
          mkdir /home/runner/work/secrets
      
      - name: Copy GPG passphrase
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run : |
          echo $GPG_PASSPHRASE > /home/runner/work/secrets/passphrase.file
      
      - name: Copy GPG key
        env:
          GPG_KEY_BASE64: ${{ secrets.GPG_KEY }}
        run : |
          echo $GPG_KEY_BASE64 |  base64 --decode > /home/runner/work/secrets/galasa.gpg
            
      - name: Make GPG home directory and change permissions
        run: |
          mkdir /home/runner/work/gpg
          chmod '700' /home/runner/work/gpg

      - name: Copy settings.xml
        run : |
          cp ${{ github.workspace }}/.github/common-files/settings.xml /home/runner/work/gpg/settings.xml
        
      - name: Import GPG
        run: |
          gpg --homedir /home/runner/work/gpg --pinentry-mode loopback --passphrase-file /home/runner/work/secrets/passphrase.file --import /home/runner/work/secrets/galasa.gpg

      # This is required so the galasabld-amd64 image can be run in the next step.
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        env:
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}
      
      - name:  Generate Galasa OBR generic pom.xml
        run: |
          docker run --rm -v ${{ github.workspace }}/modules:/var/root/ ghcr.io/${{ env.NAMESPACE }}/galasabld-amd64:main template --releaseMetadata var/root/framework/release.yaml --releaseMetadata /var/root/extensions/release.yaml --releaseMetadata /var/root/managers/release.yaml --releaseMetadata /var/root/obr/release.yaml --template /var/root/obr/obr-generic/pom.template --output /var/root/obr/obr-generic/pom.xml --obr
           
      - name: Display Galasa OBR generic pom.xml
        run: |
          cat modules/obr/obr-generic/pom.xml

      - name: Download platform from this workflow
        id: download-platform
        uses: actions/download-artifact@v4
        with:
          name: platform
          path: modules/artifacts

      - name: Download wrapping artifacts from this workflow
        id: download-wrapping
        uses: actions/download-artifact@v4
        with:
          name: wrapping
          path: modules/artifacts

      - name: Download gradle artifacts from this workflow
        id: download-gradle
        uses: actions/download-artifact@v4
        with:
          name: gradle
          path: modules/artifacts

      - name: Download maven artifacts from this workflow
        id: download-maven
        uses: actions/download-artifact@v4
        with:
          name: maven
          path: modules/artifacts

      - name: Download framework artifacts from this workflow
        id: download-framework
        uses: actions/download-artifact@v4
        with:
          name: framework
          path: modules/artifacts

      - name: Download extensions artifacts from this workflow
        id: download-extensions
        uses: actions/download-artifact@v4
        with:
          name: extensions
          path: modules/artifacts

      - name: Download managers artifacts from this workflow
        id: download-managers
        uses: actions/download-artifact@v4
        with:
          name: managers
          path: modules/artifacts

      - name: Download obr artifacts
        id: download-obr
        uses: actions/download-artifact@v4
        with:
          name: obr
          path: modules/artifacts
      
      # - name: Cache OBR-generic dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.m2/repository
      #       !~/.m2/repository/dev/galasa/**
      #     key: cache-obr-generic-${{ hashFiles('**/pom.xml') }} 
      #     restore-keys: |
      #       cache-obr-generic-

      - name: Build Galasa OBR generic pom.xml with maven
        working-directory: modules/obr/obr-generic
        env:
          GPG_KEYID: ${{ secrets.GPG_KEYID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -o pipefail
          # Note: using the maven plugin version ${{inputs.galasa-version}} which we should have
          # downloaded in the maven artifacts.
          mvn -f pom.xml process-sources -X \
          -Dgalasa.source.repo=file:${{ github.workspace }}/modules/artifacts \
          -Dgalasa.central.repo=https://repo.maven.apache.org/maven2/ \
          -Dgpg.key.id="${{ env.GPG_KEYID }}" \
          -Dgpg.passphrase="${{ env.GPG_PASSPHRASE }}" \
          dev.galasa:galasa-maven-plugin:${{inputs.galasa-version}}:obrembedded \
          --batch-mode --errors --fail-at-end \
          --settings /home/runner/work/gpg/settings.xml 2>&1 | tee build.log
        
      - name: Upload Galasa OBR Generic build log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: galasa-obr-generic-build-log
          path: modules/obr/obr-generic/build.log
          retention-days: 7

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        env:
          WRITE_GITHUB_PACKAGES_USERNAME: ${{ vars.WRITE_GITHUB_PACKAGES_USERNAME }}
          WRITE_GITHUB_PACKAGES_TOKEN: ${{ secrets.WRITE_GITHUB_PACKAGES_TOKEN }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.WRITE_GITHUB_PACKAGES_USERNAME }}
          password: ${{ env.WRITE_GITHUB_PACKAGES_TOKEN }}
    
      - name: Extract metadata for OBR generic image
        id: metadata-obr-generic
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/obr-generic
  
      - name: Build and push obr-generic
        id: build-obr-generic
        uses: docker/build-push-action@v5
        with:
          context: modules/obr
          file: modules/obr/dockerfiles/dockerfile.obrgeneric
          push: true
          tags: ${{ steps.metadata-obr-generic.outputs.tags }}
          labels: ${{ steps.metadata-obr-generic.outputs.labels }}

      - name: Extract metadata for Galasa boot embedded image
        id: metadata-boot-embedded
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/galasa-boot-embedded
  
      - name: Build and push Galasa boot embedded image
        id: build-boot-embedded
        uses: docker/build-push-action@v5
        with:
          context: modules/obr
          file: modules/obr/dockerfiles/dockerfile.bootembedded
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.metadata-boot-embedded.outputs.tags }}
          labels: ${{ steps.metadata-boot-embedded.outputs.labels }}
          build-args: |
            tag=${{ env.BRANCH }}
            dockerRepository=${{ env.REGISTRY }}
            jdkImage=ghcr.io/galasa-dev/openjdk:17

      - name: Extract metadata for Galasa IBM boot embedded image
        id: metadata-ibm-boot-embedded
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/galasa-ibm-boot-embedded
  
      - name: Build and push Galasa IBM boot embedded image
        id: build-ibm-boot-embedded
        uses: docker/build-push-action@v5
        with:
          context: modules/obr
          file: modules/obr/dockerfiles/dockerfile.ibmbootembedded
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.metadata-ibm-boot-embedded.outputs.tags }}
          labels: ${{ steps.metadata-ibm-boot-embedded.outputs.labels }}
          build-args: |
            tag=${{ env.BRANCH }}
            dockerRepository=${{ env.REGISTRY }}

  trigger-next-workflows:
    # Skip this job for forks
    if: ${{ github.repository_owner == 'galasa-dev' }}
    name: Trigger next workflows in the build chain
    needs: [build-obr, build-obr-generic, build-obr-javadocs, build-obr-galasabld-image]
    runs-on: ubuntu-latest

    steps:
      - name: Triggering helm build (github.ref is main)
        if: ${{ env.BRANCH == 'main' }}
        env:
          GH_TOKEN: ${{ secrets.GALASA_TEAM_GITHUB_TOKEN }}
        run: |
          gh workflow run build-helm.yaml --repo https://github.com/galasa-dev/automation --ref ${{ env.BRANCH }}

      - name: Triggering integratedtests build (github.ref is main)
        if: ${{ env.BRANCH == 'main' }}
        env:
          GH_TOKEN: ${{ secrets.GALASA_TEAM_GITHUB_TOKEN }}
        run: |
          gh workflow run build.yaml --repo https://github.com/galasa-dev/integratedtests --ref ${{ env.BRANCH }}

      - name: Triggering simplatform build
        env:
            GH_TOKEN: ${{ secrets.GALASA_TEAM_GITHUB_TOKEN }}
        run: |
          gh workflow run build.yaml --repo https://github.com/galasa-dev/simplatform --ref ${{ env.BRANCH }}

  report-failure:
    # Skip this job for forks
    if: ${{ failure() && github.repository_owner == 'galasa-dev' }}
    name: Report failure in workflow
    runs-on: ubuntu-latest
    needs: [log-github-ref, build-obr, build-obr-javadocs, build-obr-generic, trigger-next-workflows]

    steps:
      - name: Report failure in workflow to Slack
        env: 
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run : |
          docker run --rm ghcr.io/galasa-dev/galasabld-ibm:main slackpost workflows --repo "galasa" --module "obr" --workflowName "${{ github.workflow }}" --workflowRunNum "${{ github.run_id }}" --ref "${{ env.BRANCH }}" --hook "${{ env.SLACK_WEBHOOK }}"
