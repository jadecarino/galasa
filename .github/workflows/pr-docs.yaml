#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#
name: Galasa documentation PR build

on:
  workflow_call:
    inputs:
      docs-changed:
        description: 'True if this module has been changed and should be rebuilt'
        required: true
        type: string
      artifact-id:
        description: 'The Workflow Run ID of the last workflow containing artifacts to download'
        required: true
        type: string

jobs:
  log-unchanged:
    name: Docs are unchanged
    if: ${{ inputs.docs-changed == 'false' }}
    runs-on: ubuntu-latest

    steps:
      - name: Log this module is unchanged
        run: |
          echo "The documentation source is unchanged"
        
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 

      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-

      # We can download the zipped markdown for CLI syntax 
      # generated by the CLI build, and placed into the 
      # maven repository.
      - name: Download cli artifacts from this workflow
        id: download-cli
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: cli
          path: /home/runner/.m2/repository

      # The cli module wasn't changed, so download artifacts
      # from the last successful workflow.
      - name: Download cli from last successful workflow
        if: ${{ steps.download-cli.outcome == 'failure' }}
        uses: actions/download-artifact@v4
        with:
          name: cli
          path: /home/runner/.m2/repository
          github-token: ${{ github.token }}
          run-id: ${{ inputs.artifact-id }}

      # # We can download the zipped rest api doc from the framework module build 
      # # and placed in the maven repository.
      # - name: Download rest api docs artifacts into this workflow
      #   id: download-rest-api-docs
      #   continue-on-error: true
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: rest-api-docs
      #     path: /home/runner/.m2/repository

      # # The rest api doc wasn't available/changed, so download artifacts
      # # from the last successful workflow.
      # - name: Download rest api from last successful workflow
      #   if: ${{ steps.download-rest-api-docs.outcome == 'failure' }}
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: rest-api-docs
      #     path: /home/runner/.m2/repository
      #     github-token: ${{ github.token }}
      #     run-id: ${{ inputs.artifact-id }}

      # We can download the zipped javadoc from the obr build
      # generated by the CLI build, and placed into the 
      # maven repository.
      - name: Download javadoc artifacts from this workflow
        id: download-javadoc
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: javadoc
          path: /home/runner/.m2/repository

      # The javadoc doc wasn't available/changed, so download artifacts
      # from the last successful workflow.
      - name: Download javadoc from last successful workflow
        if: ${{ steps.download-javadoc.outcome == 'failure' }}
        uses: actions/download-artifact@v4
        with:
          name: javadoc
          path: /home/runner/.m2/repository
          github-token: ${{ github.token }}
          run-id: ${{ inputs.artifact-id }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.9
          cache-disabled: true
          gradle-home-cache-excludes: |
            caches/modules-2/files-2.1/dev.galasa/**

      - name: Install python packages
        run: |
          pip install mkdocs-material 

      # Sure, we could explicitly output the zip of the markdown
      # and import it from the CLI build without going through
      # the maven repository, but using maven is more conducive 
      # for local builds passing artifacts between built components.
      # And it allows us to use the same gradle file to do the actual
      # building, which gets more testing if it's used locally also.
      - name: Build and package the docs
        working-directory: ./docs
        run : |
          set -o pipefail
          gradle -b build.gradle publish --info --warning-mode all \
          --no-daemon --console plain \
          -PsourceMaven=/home/runner/.m2/repository \
          -PcentralMaven=https://repo.maven.apache.org/maven2/ \
          -PtargetMaven=${{ github.workspace }}/docs/repo 2>&1 | tee build-docs.log      

      - name: Upload build log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docs-gradle-build-log
          path: docs/build-docs.log
          retention-days: 7
      
      - name: Upload docs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-maven
          path: docs/repo

      - name: Upload docs site
        uses: actions/upload-artifact@v4
        with:
          name: galasa-docs-site
          path: docs/build/site
 
      - name: Build galasa-docs-site image for testing
        uses: docker/build-push-action@v5
        with:
          context: docs
          file: docs/dockerfile.galasadocssite
          load: true
          tags: galasa-docs-site:test
