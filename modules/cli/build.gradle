//
// Objectives:
//
// - The galasactl tool needs to embed the galasa-boot.jar so that the jar can be 
//   unpacked on disk and used to launch testcases in a local jvm.
//   So we need to get hold of this boot jar.
//
// - The galasactl tool needs to talk to the API server via an HTTP client layer, 
//   which is generated from a yaml definition file.
//   So we need to get hold of a generator tool so we can 
//

plugins {
    id 'java'
    id 'maven-publish'
    id 'distribution' // For creating the zip distribution
}

// Note: The following version is picked up by the build process and fed
// into the code, so the code knows what versions of galasa it should be 
// dealing with. Do not mess with the `def {variableName}` part of the following 
// lines, only change the versions we rely upon.

def galasaVersion = '0.43.0'

repositories {
    gradlePluginPortal()
    mavenLocal()
    maven {
        url = "$sourceMaven"
    }
    mavenCentral()
}

def group = "dev.galasa"

dependencies {
    // Use dev.galasa.platform to obtain the versions
    implementation platform('dev.galasa:dev.galasa.platform:0.43.0')
    // We need the galasa-boot jar so we can launch tests in a local JVM
    implementation 'dev.galasa:galasa-boot'
    // We need the openapi generator to turn a yaml file into go client stubs, 
    // so we can call the api server REST services
    // https://mvnrepository.com/artifact/org.openapitools/openapi-generator
    implementation 'org.openapitools:openapi-generator-cli'

    // Download the openapi.yaml specification for the REST APIs.
    // The REST interface spec is always the same version as the Galasa version.
    compileOnly group: "dev.galasa", name: "dev.galasa.framework.api.openapi", ext: "yaml"
}

task downloadRawDependencies(type: Copy) {
    // Download the dependencies onto the local disk.
    from configurations.compileClasspath
    into 'build/dependencies'
    dependsOn configurations.compileClasspath
}

task downloadDependencies(type: Copy) {
    // Rename the complex openapi.yaml file into something easier to use elsewhere.
    // So the path to the new file is build/dependencies/openapi.yaml
    from "build/dependencies/dev.galasa.framework.api.openapi-${galasaVersion}.yaml"
    into "build/dependencies"
    rename { fileName -> "openapi.yaml" }
    dependsOn downloadRawDependencies
}

//tasks.register('installJarsIntoTemplates', Copy) {
task installJarsIntoTemplates(type: Copy) {
    // We want to embed some files into the executable.
    // Copy the files into the go templates folder.
    from layout.buildDirectory.file("dependencies/galasa-boot-"+galasaVersion+".jar")
    into layout.buildDirectory.dir("../pkg/embedded/templates/galasahome/lib")
    dependsOn downloadDependencies
}
description = 'Galasa CLI'

// Define the zip task
task createCliDocumentationZip(type: Zip) {
    archiveFileName = "dev.galasa.cli.docs.zip" // Name of the generated zip file
    destinationDirectory = file("$buildDir") // Where to create the zip
    from("$buildDir/cli-docs") {        // The folder to zip.  Relative path.
        include '**/*'
    }
}

// Configure publishing
publishing {
    
    publications {
        maven(MavenPublication) {
            // Artifact is the zip file created by our task
            artifact "$buildDir/dev.galasa.cli.docs.zip"

            // Define the pom.xml (metadata)
            pom {
                name = 'galasactl tool syntax documentation'
                description = 'The documentation for the galasactl tool is contained within the zip file.'
                groupId = "dev.galasa"
                artifactId = 'dev.galasa.cli.docs' // Artifact ID for the zip
                version = galasaVersion
            }
        }
    }
    repositories {
        maven {
            url  = "$targetMaven"
            
            if ("$targetMaven".startsWith('http')) {
                credentials {
                    username System.getenv("GITHUB_ACTOR")
                    password System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}



task generateCliSyntaxDocumentation(type: Exec) {

    String osName = System.getProperty("os.name").toLowerCase()
    String osArch = System.getProperty("os.arch").toLowerCase()

    println "Operating System: $osName"
    println "CPU Architecture: $osArch"

    def targetOs = ""
    def suffix = ""
    if (osName.contains("win")) {
        targetOs = "windows"
        suffix = ".exe"
    } else if (osName.contains("mac")) {
        targetOs = "darwin"
    } else if (osName.contains("nix") || osName.contains("nux") || osName.contains("aix")) {
        targetOs = "linux"
    } else {
        targetOs = "unknown"
    }

    def targetArch = ""
    if (osArch.contains("amd64") || osArch.contains("x86_64")) {
        targetArch = "x86_64"
    } else if (osArch.contains("x86")) {
        targetArch = "x86_64"
    } else if (osArch.contains("arm64") || osArch.contains("aarch64")) {
        targetArch = "arm64"
    } else if (osArch.contains("arm")) {
        targetArch = "arm"
    } else {
        targetArch = "unknown"
    }
    executable "bin/gendocs-galasactl-$targetOs-$targetArch$suffix" 
    args = ["build/cli-docs"]
}

task createDocsTargetFolder() {
    project.mkdir "build/cli-docs"
}

tasks.named('generateCliSyntaxDocumentation') {
    dependsOn createDocsTargetFolder
}

tasks.named('createCliDocumentationZip') {
    dependsOn generateCliSyntaxDocumentation
}

// Add a task dependency.  This makes sure the zip is created before publishing.
tasks.named('publish') {
    dependsOn createCliDocumentationZip
}

tasks.named('publishMavenPublicationToMavenRepository') {
    dependsOn createCliDocumentationZip
}